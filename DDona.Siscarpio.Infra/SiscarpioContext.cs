

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "DDona.Siscarpio.Infra\App.config"
//     Connection String Name: "SiscarpioContext"
//     Connection String:      "Server=.\SQLExpress;Database=Siscarpio;User Id=sa;password=**zapped**;;MultipleActiveResultSets=true;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace DDona.Siscarpio.Infra
{
    // ************************************************************************
    // Unit of work
    public interface ISiscarpioContext : IDisposable
    {
        DbSet<Dia> Dias { get; set; } // Dia
        DbSet<Prato> Pratoes { get; set; } // Prato
        DbSet<PratoDia> PratoDias { get; set; } // PratoDia
        DbSet<PratoDiaUsuario> PratoDiaUsuarios { get; set; } // PratoDiaUsuario
        DbSet<Semana> Semanas { get; set; } // Semana
        DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        DbSet<Usuario> Usuarios { get; set; } // Usuario

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public class SiscarpioContext : DbContext, ISiscarpioContext
    {
        public DbSet<Dia> Dias { get; set; } // Dia
        public DbSet<Prato> Pratoes { get; set; } // Prato
        public DbSet<PratoDia> PratoDias { get; set; } // PratoDia
        public DbSet<PratoDiaUsuario> PratoDiaUsuarios { get; set; } // PratoDiaUsuario
        public DbSet<Semana> Semanas { get; set; } // Semana
        public DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public DbSet<Usuario> Usuarios { get; set; } // Usuario
        
        static SiscarpioContext()
        {
            System.Data.Entity.Database.SetInitializer<SiscarpioContext>(null);
        }

        public SiscarpioContext()
            : base("Name=SiscarpioContext")
        {
        }

        public SiscarpioContext(string connectionString) : base(connectionString)
        {
        }

        public SiscarpioContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new DiaConfiguration());
            modelBuilder.Configurations.Add(new PratoConfiguration());
            modelBuilder.Configurations.Add(new PratoDiaConfiguration());
            modelBuilder.Configurations.Add(new PratoDiaUsuarioConfiguration());
            modelBuilder.Configurations.Add(new SemanaConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new UsuarioConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new DiaConfiguration(schema));
            modelBuilder.Configurations.Add(new PratoConfiguration(schema));
            modelBuilder.Configurations.Add(new PratoDiaConfiguration(schema));
            modelBuilder.Configurations.Add(new PratoDiaUsuarioConfiguration(schema));
            modelBuilder.Configurations.Add(new SemanaConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new UsuarioConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeSiscarpioContext : ISiscarpioContext
    {
        public DbSet<Dia> Dias { get; set; }
        public DbSet<Prato> Pratoes { get; set; }
        public DbSet<PratoDia> PratoDias { get; set; }
        public DbSet<PratoDiaUsuario> PratoDiaUsuarios { get; set; }
        public DbSet<Semana> Semanas { get; set; }
        public DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public DbSet<Usuario> Usuarios { get; set; }

        public FakeSiscarpioContext()
        {
            Dias = new FakeDbSet<Dia>();
            Pratoes = new FakeDbSet<Prato>();
            PratoDias = new FakeDbSet<PratoDia>();
            PratoDiaUsuarios = new FakeDbSet<PratoDiaUsuario>();
            Semanas = new FakeDbSet<Semana>();
            Sysdiagrams = new FakeDbSet<Sysdiagram>();
            Usuarios = new FakeDbSet<Usuario>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Dia
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Dia
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime Data { get; set; } // Data
        public int IdSemana { get; set; } // IdSemana
        public bool Habilitado { get; set; } // Habilitado

        // Reverse navigation
        public virtual ICollection<PratoDia> PratoDias { get; set; } // PratoDia.FK_PratoDia_Dia

        // Foreign keys
        public virtual Semana Semana { get; set; } // FK_Dia_Semana
        
        public Dia()
        {
            PratoDias = new List<PratoDia>();
        }
    }

    // Prato
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Prato
    {
        public int Id { get; set; } // Id (Primary key)
        public string Nome { get; set; } // Nome
        public string Descricao { get; set; } // Descricao
        public bool Ativo { get; set; } // Ativo

        // Reverse navigation
        public virtual ICollection<PratoDia> PratoDias { get; set; } // PratoDia.FK_PratoDia_Prato
        
        public Prato()
        {
            PratoDias = new List<PratoDia>();
        }
    }

    // PratoDia
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class PratoDia
    {
        public int Id { get; set; } // Id (Primary key)
        public int IdDia { get; set; } // IdDia
        public int IdPrato { get; set; } // IdPrato
        public DateTime DataCriacao { get; set; } // DataCriacao
        public DateTime? DataAlteracao { get; set; } // DataAlteracao

        // Reverse navigation
        public virtual ICollection<PratoDiaUsuario> PratoDiaUsuarios { get; set; } // PratoDiaUsuario.FK_PratoDiaUsuario_PratoDia

        // Foreign keys
        public virtual Dia Dia { get; set; } // FK_PratoDia_Dia
        public virtual Prato Prato { get; set; } // FK_PratoDia_Prato
        
        public PratoDia()
        {
            PratoDiaUsuarios = new List<PratoDiaUsuario>();
        }
    }

    // PratoDiaUsuario
    public class PratoDiaUsuario
    {
        public int Id { get; set; } // Id (Primary key)
        public int IdPratoDia { get; set; } // IdPratoDia
        public int IdUsuario { get; set; } // IdUsuario
        public DateTime DataCriacao { get; set; } // DataCriacao
        public DateTime? DataAlteracao { get; set; } // DataAlteracao

        // Foreign keys
        public virtual PratoDia PratoDia { get; set; } // FK_PratoDiaUsuario_PratoDia
        public virtual Usuario Usuario { get; set; } // FK_PratoDiaUsuario_Usuario
    }

    // Semana
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Semana
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime DtInicio { get; set; } // DtInicio
        public DateTime DtFim { get; set; } // DtFim
        public TimeSpan HoraLimiteAlteracao { get; set; } // HoraLimiteAlteracao

        // Reverse navigation
        public virtual ICollection<Dia> Dias { get; set; } // Dia.FK_Dia_Semana
        
        public Semana()
        {
            Dias = new List<Dia>();
        }
    }

    // sysdiagrams
    public class Sysdiagram
    {
        public string Name { get; set; } // name
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // Usuario
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Usuario
    {
        public int Id { get; set; } // Id (Primary key)
        public string Nome { get; set; } // Nome
        public string Username { get; set; } // Username
        public string Password { get; set; } // Password
        public bool Ativo { get; set; } // Ativo
        public bool SenhaResetada { get; set; } // SenhaResetada

        // Reverse navigation
        public virtual ICollection<PratoDiaUsuario> PratoDiaUsuarios { get; set; } // PratoDiaUsuario.FK_PratoDiaUsuario_Usuario
        
        public Usuario()
        {
            PratoDiaUsuarios = new List<PratoDiaUsuario>();
        }
    }


    // ************************************************************************
    // POCO Configuration

    // Dia
    public class DiaConfiguration : EntityTypeConfiguration<Dia>
    {
        public DiaConfiguration()
            : this("dbo")
        {
        }
 
        public DiaConfiguration(string schema)
        {
            ToTable(schema + ".Dia");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Data).HasColumnName("Data").IsRequired().HasColumnType("datetime");
            Property(x => x.IdSemana).HasColumnName("IdSemana").IsRequired().HasColumnType("int");
            Property(x => x.Habilitado).HasColumnName("Habilitado").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Semana).WithMany(b => b.Dias).HasForeignKey(c => c.IdSemana); // FK_Dia_Semana
        }
    }

    // Prato
    public class PratoConfiguration : EntityTypeConfiguration<Prato>
    {
        public PratoConfiguration()
            : this("dbo")
        {
        }
 
        public PratoConfiguration(string schema)
        {
            ToTable(schema + ".Prato");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Nome).HasColumnName("Nome").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(80);
            Property(x => x.Descricao).HasColumnName("Descricao").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Ativo).HasColumnName("Ativo").IsRequired().HasColumnType("bit");
        }
    }

    // PratoDia
    public class PratoDiaConfiguration : EntityTypeConfiguration<PratoDia>
    {
        public PratoDiaConfiguration()
            : this("dbo")
        {
        }
 
        public PratoDiaConfiguration(string schema)
        {
            ToTable(schema + ".PratoDia");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.IdDia).HasColumnName("IdDia").IsRequired().HasColumnType("int");
            Property(x => x.IdPrato).HasColumnName("IdPrato").IsRequired().HasColumnType("int");
            Property(x => x.DataCriacao).HasColumnName("DataCriacao").IsRequired().HasColumnType("datetime");
            Property(x => x.DataAlteracao).HasColumnName("DataAlteracao").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Dia).WithMany(b => b.PratoDias).HasForeignKey(c => c.IdDia); // FK_PratoDia_Dia
            HasRequired(a => a.Prato).WithMany(b => b.PratoDias).HasForeignKey(c => c.IdPrato); // FK_PratoDia_Prato
        }
    }

    // PratoDiaUsuario
    public class PratoDiaUsuarioConfiguration : EntityTypeConfiguration<PratoDiaUsuario>
    {
        public PratoDiaUsuarioConfiguration()
            : this("dbo")
        {
        }
 
        public PratoDiaUsuarioConfiguration(string schema)
        {
            ToTable(schema + ".PratoDiaUsuario");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.IdPratoDia).HasColumnName("IdPratoDia").IsRequired().HasColumnType("int");
            Property(x => x.IdUsuario).HasColumnName("IdUsuario").IsRequired().HasColumnType("int");
            Property(x => x.DataCriacao).HasColumnName("DataCriacao").IsRequired().HasColumnType("datetime");
            Property(x => x.DataAlteracao).HasColumnName("DataAlteracao").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.PratoDia).WithMany(b => b.PratoDiaUsuarios).HasForeignKey(c => c.IdPratoDia); // FK_PratoDiaUsuario_PratoDia
            HasRequired(a => a.Usuario).WithMany(b => b.PratoDiaUsuarios).HasForeignKey(c => c.IdUsuario); // FK_PratoDiaUsuario_Usuario
        }
    }

    // Semana
    public class SemanaConfiguration : EntityTypeConfiguration<Semana>
    {
        public SemanaConfiguration()
            : this("dbo")
        {
        }
 
        public SemanaConfiguration(string schema)
        {
            ToTable(schema + ".Semana");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DtInicio).HasColumnName("DtInicio").IsRequired().HasColumnType("datetime");
            Property(x => x.DtFim).HasColumnName("DtFim").IsRequired().HasColumnType("datetime");
            Property(x => x.HoraLimiteAlteracao).HasColumnName("HoraLimiteAlteracao").IsRequired().HasColumnType("time");
        }
    }

    // sysdiagrams
    public class SysdiagramConfiguration : EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName("name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName("principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName("diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName("version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName("definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // Usuario
    public class UsuarioConfiguration : EntityTypeConfiguration<Usuario>
    {
        public UsuarioConfiguration()
            : this("dbo")
        {
        }
 
        public UsuarioConfiguration(string schema)
        {
            ToTable(schema + ".Usuario");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Nome).HasColumnName("Nome").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(80);
            Property(x => x.Username).HasColumnName("Username").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Password).HasColumnName("Password").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Ativo).HasColumnName("Ativo").IsRequired().HasColumnType("bit");
            Property(x => x.SenhaResetada).HasColumnName("SenhaResetada").IsRequired().HasColumnType("bit");
        }
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

